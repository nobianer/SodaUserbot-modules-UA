# meta developer: @nobianermodules

version = (1, 0, 0)

import asyncio

from telethon import functions
from telethon.tl.types import Message

from .. import loader, utils


@loader.tds
class SpotifyScannerMod(loader.Module):
    """
    –ú–æ–¥—É–ª—å –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è —Ä–æ—Å—ñ–π—Å—å–∫–∏—Ö –∞—Ä—Ç–∏—Å—Ç—ñ–≤ Spotify
    https://t.me/spotifyscannerbot
    –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞ —ñ –≤–∏–º–∫–Ω—ñ—Ç—å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    """

    strings = {
        "name": "SpotifyScanner",
        "loading": "<emoji document_id=5325792861885570739>üîÑ</emoji> –í–∞—à –∑–∞–ø–∏—Ç –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è...",
        "no_args": "<emoji document_id=5210952531676504517>üö´</emoji> –ù–µ –≤–∫–∞–∑–∞–Ω–æ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏!",
        "start_text": "<b>–í–∞—à –∑–∞–ø–∏—Ç:</b> {args}\n\n<b>–í—ñ–¥–ø–æ–≤—ñ–¥—å:</b>\n",
        "context_text": "‚ùï –°—Ç–≤–æ—Ä–∏–≤—Å—è –Ω–æ–≤–∏–π –¥—ñ–∞–ª–æ–≥. –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–∞–ø–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–æ.",
    }

    def __init__(self):
        self.name = self.strings["name"]

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.gpt_free = "@spotifyscannerbot"

    async def message_q(
        self,
        text: str,
        user_id: int,
        mark_read: bool = False,
        delete: bool = False,
        ignore_answer: bool = False,
    ):
        """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –æ—Ç—Ä–∏–º—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å"""
        async with self.client.conversation(user_id) as conv:
            msg = await conv.send_message(text)
            while True:
                await asyncio.sleep(1)
                response = await conv.get_response()
                if mark_read:
                    await conv.mark_read()
                if delete:
                    await msg.delete()
                    await response.delete()
                if ignore_answer:
                    return response
                if "‚úÖ –ó–∞–ø–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ" in response.text:
                    continue
                if "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ" in response.text:
                    continue
                return response

    async def scancmd(self, message: Message):
        """
        {text} - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞—Ä—Ç–∏—Å—Ç–∞
        """
        args = utils.get_args_raw(message)

        if not args:
            return await utils.answer(message, self.strings["no_args"])
        await utils.answer(message, self.strings["loading"])

        response = await self.message_q(
            args, self.gpt_free, mark_read=True, delete=True, ignore_answer=False
        )

        text = self.strings["start_text"].format(args=args) + response.text.replace(
            "/context", "<code>.contextgpt</code>"
        )

        return await utils.answer(message, text)