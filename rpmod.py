# ---------------------------------------------------------------------------------
#  /\_/\  üåê This module was loaded through https://t.me/hikkamods_bot
# ( o.o )  üîê Licensed under the GNU AGPLv3.
#  > ^ <   ‚ö†Ô∏è Owner of heta.hikariatama.ru doesn't take any responsibilities or intellectual property rights regarding this script
# ---------------------------------------------------------------------------------
# Name: rpmod
# meta developer: @nobianermodules
# Commands:
# .rp      | .rptoggle | .rplist | .rpbackup | .rprestore
# .rpchats
# ---------------------------------------------------------------------------------

#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2022
#           https://t.me/hikariatama
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# scope: hikka_min 1.2.10

# meta pic: https://img.icons8.com/color/480/000000/comedy.png
# meta banner: https://mods.hikariatama.ru/badges/rpmod.jpg
# meta developer: @hikarimods

import io
import json

import grapheme
from telethon.tl.types import Message
from telethon.utils import get_display_name

from .. import loader, utils


@loader.tds
class RPMod(loader.Module):
    """RPMod by HikariMods"""

    strings = {
        "name": "RPMod",
        "args": "üö´ <b>Incorrect args</b>",
        "success": "‚úÖ <b>Success</b>",
        "rp_on": "‚úÖ <b>RPM on</b>",
        "rp_off": "‚úÖ <b>RPM off</b>",
        "rplist": "ü¶ä <b>Current RP commands</b>\n\n{}",
        "backup_caption": (
            "ü¶ä <b>My RP commands. Restore with </b><code>.rprestore</code>"
        ),
        "no_file": "üö´ <b>Reply to file</b>",
        "restored": "‚úÖ <b>RP Commands restored. See them with </b><code>.rplist</code>",
    }

    strings_ua = {
        "args": "üö´ <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏</b>",
        "success": "‚úÖ <b>–£—Å–ø—ñ—à–Ω–æ</b>",
        "rp_on": "‚úÖ <b>RPM –≤–≤—ñ–º–∫–Ω–µ–Ω–æ</b>",
        "rp_off": "‚úÖ <b>RPM –≤–∏–º–∫–Ω–µ–Ω–æ</b>",
        "rplist": "ü¶ä <b>–ü–æ—Ç–æ—á–Ω—ñ RP –∫–æ–º–∞–Ω–¥–∏</b>\n\n{}",
        "backup_caption": (
            "ü¶ä <b>–ú–æ—ó RP –∫–æ–º–∞–Ω–¥–∏. –¢–∏ –º–æ–∂–µ—à –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —ó—Ö, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏"
            " </b><code>.rprestore</code>"
        ),
        "no_file": "üö´ <b>–†–µ–ø–ª–∞–π –Ω–∞ —Ñ–∞–π–ª</b>",
        "restored": (
            "‚úÖ <b>RP –∫–æ–º–∞–Ω–¥–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ. –á—Ö –º–æ–∂–Ω–∞ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏"
            " </b><code>.rplist</code>"
        ),
        "_cmd_doc_rp": (
            "<command> <message> - –î–æ–¥–∞—Ç–∏ RP –∫–æ–º–∞–Ω–¥—É. –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è,"
            " –∫–æ–º–∞–Ω–¥—É –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ"
        ),
        "_cmd_doc_rptoggle": "–£–≤—ñ–º–∫–Ω—É—Ç–∏\\–≤–∏–º–∫–Ω—É—Ç–∏ RP —Ä–µ–∂–∏–º —É –ø–æ—Ç–æ—á–Ω–æ–º—É —á–∞—Ç—ñ",
        "_cmd_doc_rplist": "–ü–æ–∫–∞–∑–∞—Ç–∏ RP –∫–æ–º–∞–Ω–¥–∏",
        "_cmd_doc_rpbackup": "–ó–±–µ—Ä–µ–≥—Ç–∏ RP –∫–æ–º–∞–Ω–¥–∏ —É —Ñ–∞–π–ª",
        "_cmd_doc_rprestore": "–í—ñ–¥–Ω–æ–≤–∏—Ç–∏ RP –∫–æ–º–∞–Ω–¥–∏ –∑ —Ñ–∞–π–ª—É",
        "_cmd_doc_rpchats": "–ü–æ–∫–∞–∑–∞—Ç–∏ —á–∞—Ç–∏, –¥–µ –∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º RP",
        "_cls_doc": "RPMod –≤—ñ–¥ HikariMods",
    }

    async def client_ready(self, client, db):
        self.rp = self.get(
            "rp",
            {
                "–ø–æ—Ü—ñ–ª—É–≤–∞—Ç–∏": " üíã –ø–æ—Ü—ñ–ª—É–≤–∞–≤",
                "—á–º–æ–∫": " ‚ù§Ô∏è —á–º–æ–∫–Ω—É–≤",
                "–æ–±—ñ–π–Ω—è—Ç–∏": "‚ò∫Ô∏è –æ–±—ñ–π–Ω—è–≤",
                "–ª–∏–∑–Ω—É—Ç–∏": "üëÖ –ª–∏–∑–Ω—É–≤",
                "–Ω–∞–ø–æ—ó—Ç–∏": "ü•É –Ω–∞–ø–æ—ó–≤",
                "–∑–≤'—è–∑–∞—Ç–∏": "‚õì –∑–≤'—è–∑–∞–≤",
                "–ø—Ä–∏–∫—É–≤–∞—Ç–∏": "üîó –ø—Ä–∏–∫—É–≤–∞–≤",
                "—Ç—Ä–∞—Ö–Ω—É—Ç–∏": "üëâüëå —Å–æ—á–Ω–æ —Ç—Ä–∞—Ö–Ω—É–≤",
                "–≤–±–∏—Ç–∏": "üî™ –≤–±–∏–≤",
                "–∑–Ω–∏—â–∏—Ç–∏": " üí• –∑–≤—ñ–≤ –¥–æ –∞—Ç–æ–º—ñ–≤",
                "—Ä–æ–∑—Å—Ç—Ä—ñ–ª—è—Ç–∏": "üî´ —Ä–æ–∑—Å—Ç—Ä—ñ–ª—è–≤",
                "–≤—ñ–¥–¥–∞—Ç–∏—Å—å": "ü•µ –ø—Ä–∏—Å—Ç—Ä–∞—Å–Ω–æ –≤—ñ–¥–¥–∞–≤—Å—è",
                "—Ä–∞–±": "‚õì –∑–∞–±—Ä–∞–≤ —É —Ä–∞–±—Å—Ç–≤–æ",
            },
        )
        self.chats = self.get("active", [])

    async def rpcmd(self, message: Message):
        """<command> <message> - Add RP Command. If message unspecified, remove command"""
        args = utils.get_args_raw(message)
        try:
            command = args.split(" ", 1)[0]
            msg = args.split(" ", 1)[1]
        except Exception:
            if not args or command not in self.rp:
                await utils.answer(message, self.strings("args"))
            else:
                del self.rp[command]
                self.set("rp", self.rp)
                await utils.answer(message, self.strings("success"))

            return

        self.rp[command] = msg
        self.set("rp", self.rp)
        await utils.answer(message, self.strings("success"))

    async def rptogglecmd(self, message: Message):
        """Toggle RP Mode in current chat"""
        cid = str(utils.get_chat_id(message))
        if cid in self.chats:
            self.chats.remove(cid)
            await utils.answer(message, self.strings("rp_off"))
        else:
            self.chats += [cid]
            await utils.answer(message, self.strings("rp_on"))

        self.set("active", self.chats)

    @loader.unrestricted
    async def rplistcmd(self, message: Message):
        """List RP Commands"""
        await utils.answer(
            message,
            self.strings("rplist").format(
                "\n".join(
                    [f"    ‚ñ´Ô∏è {command} - {msg}" for command, msg in self.rp.items()]
                )
            ),
        )

    async def rpbackupcmd(self, message: Message):
        """Backup RP Commands to file"""
        file = io.BytesIO(json.dumps(self.rp).encode("utf-8"))
        file.name = "rp-backup.json"
        await self._client.send_file(
            utils.get_chat_id(message),
            file,
            caption=self.strings("backup_caption"),
        )
        await message.delete()

    async def rprestorecmd(self, message: Message):
        """Restore RP Commands from file"""
        reply = await message.get_reply_message()
        if not reply or not reply.media:
            await utils.answer(message, self.strings("no_file"))
            return

        file = (await self._client.download_file(reply.media, bytes)).decode("utf-8")

        self.rp = json.loads(file)
        self.set("rp", self.rp)
        await utils.answer(message, self.strings("restored"))

    async def rpchatscmd(self, message: Message):
        """List chats, where RPM is active"""
        await utils.answer(
            message,
            f"ü¶ä <b>RPM is active in {len(self.chats)} chats:</b>\n\n"
            + "\n".join(
                [
                    "    üáØüáµ"
                    f" {utils.escape_html(get_display_name(await self._client.get_entity(int(chat))))}"
                    for chat in self.chats
                ]
            ),
        )

    async def watcher(self, message: Message):
        cid = str(utils.get_chat_id(message))
        try:
            if (
                cid not in self.chats
                or not isinstance(message, Message)
                or not hasattr(message, "raw_text")
                or message.raw_text.split(maxsplit=1)[0].lower() not in self.rp
            ):
                return
        except IndexError:
            return

        try:
            cmd = message.raw_text.split(maxsplit=1)[0].lower()
        except IndexError:
            return

        msg = self.rp[cmd]

        entity = None

        try:
            entity = await self._client.get_entity(
                message.raw_text.split(maxsplit=2)[1]
            )
        except Exception:
            pass

        reply = await message.get_reply_message()

        try:
            reply = await self._client.get_entity(reply.sender_id)
        except Exception:
            pass

        if not reply and not entity:
            return

        if reply and entity or not reply:
            reply = entity

        sender = await self._client.get_entity(message.sender_id)

        if utils.emoji_pattern.match(next(grapheme.graphemes(msg))):
            msg = list(grapheme.graphemes(msg))
            emoji = msg[0]
            msg = "".join(msg[1:])
        else:
            emoji = "ü¶ä"

        await utils.answer(
            message,
            (
                f"{emoji} <a"
                f' href="tg://user?id={sender.id}">{utils.escape_html(sender.first_name)}</a>'
                f" <b>{utils.escape_html(msg)}</b> <a"
                f' href="tg://user?id={reply.id}">{utils.escape_html(reply.first_name)}</a>'
            ),
        )
