# meta developer: @nobianermodules

from telethon.tl.types import Message
from telethon.tl.functions.channels import EditBannedRequest
from telethon.tl.types import ChatBannedRights
from datetime import timedelta, datetime, timezone
from .. import loader, utils
import re

@loader.tds
class ModerationMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —á–∞—Ç—ñ–≤"""

    strings = {
        "name": "Moderation",
        "ban_success": "üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user} –±—É–≤ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –Ω–∞ {duration}.",
        "unban_success": "‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.",
        "mute_success": "üîá –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user} –æ–±–µ–∑–∑–≤—É—á–µ–Ω–∏–π –Ω–∞ {duration}.",
        "unmute_success": "üîä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user} –º–æ–∂–µ –∑–Ω–æ–≤—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.",
        "warn_success": "‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user} –≤–∏–¥–∞–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è. ({warn_count}/{warn_limit})",
        "unwarn_success": "‚ö†Ô∏è –í—Å—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user} –∑–Ω—è—Ç—ñ.",
        "no_user": "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ @username –∞–±–æ —Ä–µ–ø–ª–∞–π –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.",
        "warn_limit_reached": "üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user} –æ—Ç—Ä–∏–º–∞–≤ {warn_limit} –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å —Ç–∞ –±—É–≤ –ø–æ–∫–∞—Ä–∞–Ω–∏–π. –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∫–∏–Ω—É—Ç—ñ.",
        "warn_limit_set": "‚úÖ –õ—ñ–º—ñ—Ç –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {limit}.",
        "warnpunish_enabled": "‚úÖ –ü–æ–∫–∞—Ä–∞–Ω–Ω—è –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.",
        "warnpunish_disabled": "‚ùå –ü–æ–∫–∞—Ä–∞–Ω–Ω—è –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.",
        "warnpunish_status": "üîÑ –ü–æ–∫–∞—Ä–∞–Ω–Ω—è –∑–∞ –ø–æ–ø–µ—Ä–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞—Ä–∞–∑—ñ: {status}.",
        "punishment_set": "‚úÖ –ü–æ–∫–∞—Ä–∞–Ω–Ω—è –∑–∞ –ø–æ–ø–µ—Ä–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {punishment}.",
        "invalid_punishment": "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ 'mute' –∞–±–æ 'ban'.",
        "punishment_duration_set": "‚úÖ –ü–æ–∫–∞—Ä–∞–Ω–Ω—è {punishment} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {duration}.",
        "invalid_duration": "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —â–æ—Å—å –Ω–∞–∫—à—Ç–∞–ª—Ç: 1d, 2h, 3m, 4s",
        "welcome_msg_set": "‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.",
        "goodbye_msg_set": "‚úÖ –ü—Ä–æ—â–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.",
        "welcome_enabled": "‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.",
        "welcome_disabled": "‚ùå –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.",
        "goodbye_enabled": "‚úÖ –ü—Ä–æ—â–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.",
        "goodbye_disabled": "‚ùå –ü—Ä–æ—â–∞–Ω–Ω—è –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.",
        "welcome": "üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {user}!",
        "goodbye": "üëã –ü—Ä–æ—â–∞–≤–∞–π, {user}!",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "warn_limit",
                3,
                "–õ—ñ–º—ñ—Ç –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å"
            ),
            loader.ConfigValue(
                "warn_punish",
                True,
                "–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–±–æ –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø–æ–∫–∞—Ä–∞–Ω–Ω—è –∑–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å"
            ),
            loader.ConfigValue(
                "punishment_type",
                "ban",
                "–¢–∏–ø –ø–æ–∫–∞—Ä–∞–Ω–Ω—è –∑–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å (ban –∞–±–æ mute)"
            ),
            loader.ConfigValue(
                "punishment_duration",
                None,
                "–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø–æ–∫–∞—Ä–∞–Ω–Ω—è (None - –Ω–∞–∑–∞–≤–∂–¥–∏)"
            ),
            loader.ConfigValue(
                "welcome_enabled",
                False,
                "–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–±–æ –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
            ),
            loader.ConfigValue(
                "goodbye_enabled",
                False,
                "–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–±–æ –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–æ—â–∞–≤–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
            ),
            loader.ConfigValue(
                "welcome_msg",
                "üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {user}!",
                "–ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
            ),
            loader.ConfigValue(
                "goodbye_msg",
                "üëã –ü—Ä–æ—â–∞–≤–∞–π, {user}!",
                "–ü—Ä–æ—â–∞–≤–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
            ),
        )
        self.warnings = {}  

    @property
    def warn_limit(self):
        return self.config["warn_limit"]

    @property
    def warn_punish(self):
        return self.config["warn_punish"]

    @property
    def punishment_type(self):
        return self.config["punishment_type"]
    
    @property
    def punishment_duration(self):
        return self.config["punishment_duration"]
    
    @property
    def welcome_enabled(self):
        return self.config["welcome_enabled"]

    @property
    def goodbye_enabled(self):
        return self.config["goodbye_enabled"]

    @property
    def welcome_msg(self):
        return self.config["welcome_msg"]

    @property
    def goodbye_msg(self):
        return self.config["goodbye_msg"]

    def parse_duration(self, duration_str):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –ø–æ–∫–∞—Ä–∞–Ω–Ω—è (1d, 1h, —Ç–∞ —ñ–Ω.)"""
        match = re.match(r"(\d+)([smhd])", duration_str)
        if match:
            duration_value = int(match.group(1))
            duration_unit = match.group(2)
            if duration_unit == 's':
                return timedelta(seconds=duration_value)
            elif duration_unit == 'm':
                return timedelta(minutes=duration_value)
            elif duration_unit == 'h':
                return timedelta(hours=duration_value)
            elif duration_unit == 'd':
                return timedelta(days=duration_value)
        return None

    async def get_user(self, message: Message, args):
        if message.is_reply:
            reply = await message.get_reply_message()
            return await self.client.get_entity(reply.sender_id)
        elif args:
            return await self.client.get_entity(args)
        else:
            return None
        
    async def user_joined(self, event):
        """–û–±—Ä–æ–±–ª—è—î –≤—Å—Ç—É–ø –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        if not self.welcome_enabled:
            return
        await event.reply(self.welcome_msg.format(user=event.user.first_name))

    async def user_left(self, event):
        """–û–±—Ä–æ–±–ª—è—î –≤–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —á–∞—Ç—É —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –ø—Ä–æ—â–∞–≤–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        if not self.goodbye_enabled:
            return
        await event.reply(self.goodbye_msg.format(user=event.user.first_name))

    async def watcher(self, event):
        """–í—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è –≤—Å—Ç—É–ø—É —Ç–∞ –≤–∏—Ö–æ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        if event.user_joined:
            await self.user_joined(event)
        elif event.user_left:
            await self.user_left(event)
    
    async def welcomecmd(self, message: Message):
       """–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–±–æ –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
       self.config["welcome_enabled"] = not self.welcome_enabled
       status = "–∞–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ" if self.welcome_enabled else "–¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ"
       await utils.answer(message, f"‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {status}.")

    async def goodbyecmd(self, message: Message):
       """–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–±–æ –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–æ—â–∞–≤–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
       self.config["goodbye_enabled"] = not self.goodbye_enabled
       status = "–∞–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ" if self.goodbye_enabled else "–¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ"
       await utils.answer(message, f"‚úÖ –ü—Ä–æ—â–∞–≤–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {status}.")

    
    async def setwelcomemsgcmd(self, message: Message):
        """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, "‚ùå –í–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        self.config["welcome_msg"] = args
        await utils.answer(message, self.strings["welcome_msg_set"])

    async def setgoodbyemsgcmd(self, message: Message):
        """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—â–∞–≤–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, "‚ùå –í–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        self.config["goodbye_msg"] = args
        await utils.answer(message, self.strings["goodbye_msg_set"])

    async def bancmd(self, message: Message):
        """–ó–∞–±–ª–æ—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —á–∞—Ç—ñ"""
        args = utils.get_args_raw(message).split()

        if message.is_reply:
            user = await self.get_user(message, "")
            duration = self.parse_duration(args[0]) if len(args) == 1 else None
        else:
            if len(args) == 0:
                return await utils.answer(message, self.strings["no_user"])
            duration = self.parse_duration(args[1]) if len(args) == 2 else None
            user = await self.get_user(message, args[0])

        if not user:
            return await utils.answer(message, self.strings["no_user"])

        until_date = datetime.now(timezone.utc) + duration if duration else None
        duration_str = args[1] if len(args) == 2 else args[0] if duration else "–Ω–∞–∑–∞–≤–∂–¥–∏"

        ban_rights = ChatBannedRights(until_date=until_date, view_messages=True)

        await self.client(EditBannedRequest(message.chat_id, user.id, ban_rights))
        await utils.answer(message, self.strings["ban_success"].format(user=user.first_name, duration=duration_str))

    async def mutecmd(self, message: Message):
        """–û–±–µ–∑–∑–≤—É—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —á–∞—Ç—ñ"""
        args = utils.get_args_raw(message).split()

        if message.is_reply:
            user = await self.get_user(message, "")
            duration = self.parse_duration(args[0]) if len(args) == 1 else None
        else:
            if len(args) == 0:
                return await utils.answer(message, self.strings["no_user"])
            duration = self.parse_duration(args[1]) if len(args) == 2 else None
            user = await self.get_user(message, args[0])

        if not user:
            return await utils.answer(message, self.strings["no_user"])

        until_date = datetime.now(timezone.utc) + duration if duration else None
        duration_str = args[1] if len(args) == 2 else args[0] if duration else "–Ω–∞–∑–∞–≤–∂–¥–∏"

        mute_rights = ChatBannedRights(until_date=until_date, send_messages=True)

        await self.client(EditBannedRequest(message.chat_id, user.id, mute_rights))
        await utils.answer(message, self.strings["mute_success"].format(user=user.first_name, duration=duration_str))

    async def unmutecmd(self, message: Message):
        """–ù–∞–¥–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≥–æ–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤ —á–∞—Ç—ñ"""
        args = utils.get_args_raw(message).split()
        user = await self.get_user(message, args[0] if args else "")
        if not user:
            return await utils.answer(message, self.strings["no_user"])

        unmute_rights = ChatBannedRights(until_date=None, send_messages=False)

        await self.client(EditBannedRequest(message.chat_id, user.id, unmute_rights))
        await utils.answer(message, self.strings["unmute_success"].format(user=user.first_name))

    async def warncmd(self, message: Message):
        """–í–∏–¥–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        args = utils.get_args_raw(message).split()
        user = await self.get_user(message, args[0] if not message.is_reply else "")

        if not user:
            return await utils.answer(message, self.strings["no_user"])

        user_id = user.id
        if user_id not in self.warnings:
            self.warnings[user_id] = 0
        self.warnings[user_id] += 1

        if self.warnings[user_id] >= self.warn_limit and self.warn_punish:
            punishment = self.punishment_type
            until_date = datetime.now(timezone.utc) + self.punishment_duration if self.punishment_duration else None

            if punishment == "ban":
                ban_rights = ChatBannedRights(until_date=until_date, view_messages=True)
                await self.client(EditBannedRequest(message.chat_id, user.id, ban_rights))
            elif punishment == "mute":
                mute_rights = ChatBannedRights(until_date=until_date, send_messages=True)
                await self.client(EditBannedRequest(message.chat_id, user.id, mute_rights))

            self.warnings[user_id] = 0  
            await utils.answer(message, self.strings["warn_limit_reached"].format(user=user.first_name, warn_limit=self.warn_limit))
        else:
            await utils.answer(message, self.strings["warn_success"].format(user=user.first_name, warn_count=self.warnings[user_id], warn_limit=self.warn_limit))

    async def unwarncmd(self, message: Message):
        """–ó–Ω—è—Ç–∏ –≤—Å—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        args = utils.get_args_raw(message).split()
        user = await self.get_user(message, args[0] if not message.is_reply else "")

        if not user:
            return await utils.answer(message, self.strings["no_user"])

        user_id = user.id
        self.warnings[user_id] = 0  
        await utils.answer(message, self.strings["unwarn_success"].format(user=user.first_name))

    async def warnlistcmd(self, message: Message):
        """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        args = utils.get_args_raw(message).split()
        user = await self.get_user(message, args[0] if not message.is_reply else "")

        if not user:
            return await utils.answer(message, self.strings["no_user"])

        user_id = user.id
        warn_count = self.warnings.get(user_id, 0)  

        await utils.answer(message, f"‚ö†Ô∏è –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.first_name} {warn_count} –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å.") 

    async def setwarncountcmd(self, message: Message):
        """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ª—ñ–º—ñ—Ç –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –¥–ª—è –ø–æ–∫–∞—Ä–∞–Ω–Ω—è"""
        args = utils.get_args_raw(message).split()
        if not args or not args[0].isdigit():
            return await utils.answer(message, "‚ùå –ë—É–¥—å-–ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ.")

        limit = int(args[0])
        self.config["warn_limit"] = limit  
        await utils.answer(message, self.strings["warn_limit_set"].format(limit=limit))

    async def setwarnpunishcmd(self, message: Message):
        """
        –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–æ–∫–∞—Ä–∞–Ω–Ω—è –∑–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
        """
        args = utils.get_args_raw(message).split()

        if len(args) == 0:
            return await utils.answer(message, self.strings["invalid_punishment"])

        punishment = args[0].lower()
        if punishment not in ["mute", "ban"]:
            return await utils.answer(message, self.strings["invalid_punishment"])

        if len(args) == 2:
            duration = self.parse_duration(args[1])
            if not duration:
                return await utils.answer(message, self.strings["invalid_duration"])
            self.config["punishment_duration"] = duration
            await utils.answer(message, self.strings["punishment_duration_set"].format(punishment=punishment, duration=args[1]))
        else:
            self.config["punishment_duration"] = None
            await utils.answer(message, self.strings["punishment_set"].format(punishment=punishment))

        self.config["punishment_type"] = punishment

    async def warnpunishcmd(self, message: Message):
        """–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏/–¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø–æ–∫–∞—Ä–∞–Ω–Ω—è –∑–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å"""
        current_status = self.warn_punish
        new_status = not current_status
        self.config["warn_punish"] = new_status

        if new_status:
            await utils.answer(message, self.strings["warnpunish_enabled"])
        else:
            await utils.answer(message, self.strings["warnpunish_disabled"])
